function registerUser(e) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Users');
  var result = { "status": "SUCCESS" };

  try {
    const userName = e.parameter.userName;
    const userPasswd = e.parameter.userPasswd;
    const phoneNumber = e.parameter.phoneNumber;

    const hashedPasswd = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, userPasswd)
      .map(b => (b < 0 ? b + 256 : b).toString(16).padStart(2, '0'))
      .join('');

    const data = sheet.getDataRange().getValues();
    
    let userId, userProduct, userService;
    let idSuffix = 1;
    
    do {
      userId = userName + idSuffix;
      userProduct = 'P' + userName + (idSuffix + 1);
      userService = 'S' + userName + (idSuffix + 2);
      ++idSuffix;
    } while (data.some(row => row[0] === userId || row[3] === userProduct || row[4] === userService));

    sheet.appendRow([userId, userName, hashedPasswd, userProduct, userService, phoneNumber]);

  } catch (exec) {
    result = { "status": "FAILED", "msg": exec.toString() };
  }

  return ContentService
    .createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}

function loginUser(e) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Users');
  var result = { "status": "FAILED", "msg": "Invalid User Id or Password" };

  try {
    const userId = e.parameter.userId;
    const passwd = e.parameter.passwd;

    const hashedPasswd = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, passwd)
      .map(b => (b < 0 ? b + 256 : b).toString(16).padStart(2, '0'))
      .join('');

    const data = sheet.getDataRange().getValues();

    for (var i = 1; i < data.length; ++i) {
      if (data[i][0] === userId && data[i][2] === hashedPasswd) {
        result = {
          "status": "SUCCESS",
          "userId": userId,
          "userName": data[i][1],
          "phoneNumber": data[i][5],
          "userProduct": data[i][3],
          "userService": data[i][4]
        };
        break;
      }
    }
  } catch (exec) {
    result = {"status": "FAILED", "msg": exec.toString()};
  }

  return ContentService
    .createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}

function addIncome(e) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Income');
  var result = {"status":"SUCCESS"};

  try{
    const dateTime = e.parameter.dateTime;
    const transactionsId = e.parameter.transactionsId;
    const productsName = e.parameter.productsName;
    const qtyProducts = e.parameter.qtyProducts;
    const revenue = e.parameter.revenue;
    const totalRavenue = qtyProducts * revenue;
    const notes = e.parameter.notes;
    const userId = e.parameter.userId;
    
    data = sheet.appendRow([dateTime, transactionsId, productsName, qtyProducts, revenue, totalRavenue, notes, userId]);
  }
  catch(exec){
    result = {"status":"FAILED", "msg":exec};
  }
  return ContentService
  .createTextOutput(JSON.stringify(result))  
  .setMimeType(ContentService.MimeType.JSON);
}

function addExpense(e) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Expense');
  var result = {"status":"SUCCESS"};

  try{
    const dateTime = e.parameter.dateTime;
    const transactionsId = e.parameter.transactionsId;
    const expenseName = e.parameter.expenseName;
    const qtyProducts = parseInt(e.parameter.qtyProducts);
    const expenseAmounts = parseFloat(e.parameter.expenseAmounts);
    const totalAmounts = qtyProducts * expenseAmounts;
    const notes = e.parameter.notes
    const userId = e.parameter.userId;
    
    data = sheet.appendRow([dateTime, transactionsId, expenseName, qtyProducts, expenseAmounts, totalAmounts, notes, userId]);
  }
  catch(exec){
    result = {"status":"FAILED", "msg":exec};
  }
  return ContentService
  .createTextOutput(JSON.stringify(result))  
  .setMimeType(ContentService.MimeType.JSON);
}

function addProduct(e){
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Products');
  var result = {"status":"SUCCESS"};

  try{
    const dateTime = e.parameter.dateTime;
    const productsId = e.parameter.productsId;
    const productsName = e.parameter.productsName;
    const productsPrice = e.parameter.productsPrice;
    const userId = e.parameter.userId;
    
    data = sheet.appendRow([dateTime, productsId, productsName, productsPrice, userId]);
  }
  catch(exec){
    result = {"status":"FAILED", "msg":exec};
  }
  return ContentService
  .createTextOutput(JSON.stringify(result))  
  .setMimeType(ContentService.MimeType.JSON);
}

// POST
function doPost(e) {
  const action = e.parameter.action;

  const output = ContentService.createTextOutput();
  output.setMimeType(ContentService.MimeType.JSON);
  
  switch(action) {
    case 'registerUser':
      return registerUser(e);
    case 'loginUser':
      return loginUser(e);
    case 'addIncome':
      return addIncome(e);
    case 'addExpense':
      return addExpense(e);
    case 'addProduct':
      return addProduct(e);
    default:
      return output.setContent(JSON.stringify({ error: "Invalid action" }));
  }
}

// GET
function doGet(e) {

  const action = e.parameter.action;
  
  switch(action) {
    case 'getDashboard':
      return getDashboard();
    case 'getIncome':
      return getIncome();
    case 'getExpense':
      return getExpense();
    case 'getUsers':
      return getUsers();
    case 'getProducts':
      return getProducts();
    case 'getServices':
      return getServices();
    case 'getExpenseTypes':
      return getExpenseTypes();
    case 'getIncomeTypes':
      return getIncomeTypes();
    default:
      return ContentService.createTextOutput("Invalid action");
  }
}

function getDashboard() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Dashboard');
  const data = sheet.getDataRange().getValues();
  return createResponse(data);
}

function getIncome() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Income');
  const data = sheet.getDataRange().getValues();
  return createResponse(data);
}

function getExpense() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Expense');
  const data = sheet.getDataRange().getValues();
  return createResponse(data);
}

function getUsers() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Users');
  const data = sheet.getDataRange().getValues();
  return createResponse(data);
}

function getProducts() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Products');
  const data = sheet.getDataRange().getValues();
  return createResponse(data);
}

function getServices() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Services');
  const data = sheet.getDataRange().getValues();
  return createResponse(data);
}

function getExpenseTypes(){
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('ExpenseTypes');
  const data = sheet.getDataRange().getValues();

  const expenseNames = data.map(row => row[0]);
  return createResponse(expenseNames);
}

function getIncomeTypes(){
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Products');
  const data = sheet.getDataRange().getValues();

  const productsName = data.map(row => row[2]);
  return createResponse(productsName);
}

function createResponse(data) {
  const output = ContentService.createTextOutput();
  output.setMimeType(ContentService.MimeType.JSON);
  output.setContent(JSON.stringify(data));
  return output;
}